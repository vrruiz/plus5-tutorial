{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introducci\u00f3n a Plus5: Programaci\u00f3n gr\u00e1fica f\u00e1cil con Python Qu\u00e9 es Plus5 Processing es un entorno de programaci\u00f3n gr\u00e1fico, ideado por Casey Reas y Ben Fry. Es, principalmente, una herramienta educativa. El objetivo es que personas sin conocimientos avanzados de inform\u00e1tica, especialmente artistas gr\u00e1ficos, se introdujeran en el mundo de la programaci\u00f3n, de una forma sencilla. En su encarnaci\u00f3n tradicional, Processing es un entorno integrado de desarrollo basado en Java, con librer\u00edas de f\u00e1cil uso. Processing ofrece funciones para dibujar y animar figuras geom\u00e9tricas, mostrar textos, im\u00e1genes, reproducir sonidos y v\u00eddeos e interactuar con algunos perif\u00e9ricos como teclado, rat\u00f3n y c\u00e1maras de v\u00eddeo. Estas librer\u00edas han sido adaptadas a otros lenguajes de programaci\u00f3n, como JavaScript y Python. Precisamente, Plus5 es una implementaci\u00f3n de Processing en Python nativo. Usa PyGame que a su vez usa las librer\u00edas SDL2, disponibles es m\u00faltiples sistemas operativos. \u00bfCu\u00e1les son las ventajas de Plus5? La primera es Python, que es un lenguaje de f\u00e1cil aprendizaje. La segunda ventaja, es que Plus5 es una librer\u00eda nativa de Python , y por tanto, puede usarse con el resto de librer\u00edas de Python, como NumPy, Pandas, TensorFlow y mil m\u00e1s. Esto abre infinitas posibilidades creativas. Entorno de programaci\u00f3n Al ser Python est\u00e1ndar, Plus5 se puede programar usando cualquier entorno de programaci\u00f3n que tenga soporte de Python, como IDLE, Visual Studio Code, PyCharm, etc. Actualmente, en Raspberry Pi OS viene el entorno Thonny Python IDE, que es el que usaremos en este tutorial. Al final del art\u00edculo indicamos los pasos a seguir para instalar Plus5. Vamos a ver ahora c\u00f3mo se programa. Hola mundo, vesi\u00f3n Plus5 Este es el programa m\u00e1s b\u00e1sico que podemos hacer usando Plus5. Tan b\u00e1sico que lo \u00fanico que hace es abrir una ventana. Los comentarios se indican con una almohadilla. 1 2 3 4 5 6 7 8 9 from plus5 import * # Usar las funciones de Plus5 def setup (): # Inicializaci\u00f3n size ( 300 , 300 ) # Ventana de 300x300 p\u00edxeles def draw (): # Dibujar pass # No hacer nada run () # Ejecutar Plus5 Lo que hace run() es llamar una sola vez a la funci\u00f3n setup() . Luego, entra en un bucle infinito en el que se llamada a la funci\u00f3n draw() 60 veces cada segundo. Generalmente, querremos hacer m\u00e1s cosas. Vamos a hacer un ejemplo m\u00e1s interesante. El siguiente programa crea una ventana de 500 p\u00edxeles de largo 500 p\u00edxeles de ancho y selecciona el color blanco para los trazos. Luego entra en un bucle infinito que pinta el fondo de la ventana de gris y dibuja una l\u00ednea desde el centro de la ventana hasta la posici\u00f3n actual del cursor del rat\u00f3n. 1 2 3 4 5 6 7 8 9 10 11 from plus5 import * # Usar las funciones de Plus5 def setup (): # Inicializaci\u00f3n size ( 300 , 300 ) # Establecer tama\u00f1o de la ventana stroke ( 255 , 255 , 255 ) # Trazos de color blanco def draw (): # Dibujar background ( 127 , 127 , 127 ) # Fondo gris line ( 150 , 150 , mouseX , mouseY ) # L\u00ednea desde centro al rat\u00f3n run () # Ejecutar programa Ahora usamos varias funciones de dibujo: stroke(color) . Establecer el color de los trazos. background(color) . Rellenar el fondo de la ventana. line(x_inicial, y_inicial, x_final, y_final) . Dibujamos una l\u00ednea. Tambi\u00e9n usamos un par de variables globales: mouse_x , mouse_y . Son variables proporcionadas por Plus5 que nos devuelven la posici\u00f3n actual del puntero del rat\u00f3n sobre la ventana. Por supuesto, Plus5 ofrece muchas m\u00e1s funciones y variables para dibujar otras figuras, trabajar con colores o leer otros perif\u00e9ricos. Pero por muy complicados que los hagamos, todos los programas de Plus5 tienen exactamente la misma estructura: import , setup() , draw() y run() . \u00a1Es muy f\u00e1cil! Coordenadas Para dibujar en Processing se har\u00e1 un uso frecuente de las coordenadas de la ventana. Su tama\u00f1o se define en la funci\u00f3n setup() mediante size(ancho,largo) . Para dibujar, debemos tener en cuenta que el punto x = 0, y = 0 est\u00e1 situado en la esquina superior derecha. x,y x,y x,y (0,0) (1,0) (2,0) (0,1) (1,1) (2,1) (0,2) (1,2) (2,2) En Plus5, podemos conocer el ancho y largo de la ventana actual, definidos en size() , mediante dos variables globales. height . Ancho de la ventana. width . Largo de la ventana. As\u00ed, para dibujar una l\u00ednea desde el centro de la ventana a all\u00e1 donde est\u00e9 el cursor del rat\u00f3n har\u00edamos: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from plus5 import * # Usar funciones de Plus5 def setup (): # Inicializaci\u00f3n size ( 300 , 300 ) # Define tama\u00f1o de la ventana stroke ( 0 , 0 , 0 ) # Trazo negro def draw (): # Dibujar background ( 255 , 255 , 255 ) # Fondo blanco centro_x = height / 2 # Calcula mitad de la ventana centro_y = width / 2 # Calcula mitad de la ventana line ( centro_x , # Dibujar l\u00ednea desde el centro centro_y , # de la ventana hasta cursor rat\u00f3n. mouseX , # Coordenada x del rat\u00f3n mouseY ) # Coordenada y del rat\u00f3n run () # Ejecutar programa El programa es bastante similar al anterior, pero en este caso, las coordenadas del centro de la ventana se calculan autom\u00e1ticamente. Colores A la hora de dibujar, muchas veces deberemos especificar un color. Aunque no sea expl\u00edcito, las figuras necesitan al menos el color del trazo, pero muchas veces tambi\u00e9n el relleno. Y hay varias formas de especificar los colores. Escala de gris, de 0 a 255 . Representa un color en la escala de grises, desde el negro (0) al blanco (255). Rojo, verde, azul . En este caso, indicamos tres valores, tambi\u00e9n desde el 0 al 255, pero indicando el tono de rojo, verde y azul. Rojo, verde, azul, transparencia . Opcionalmente, podemos indicar un cuarto valor, el de la transparencia, tambi\u00e9n desde 0 (completamente transparente) a 255 (opaco). Esto nos permite combinar figuras y mezclar colores. Veamos algunos ejemplos de uso: 1 2 background ( 255 ) # Fondo blanco background ( 255 , 0 , 0 ) # Fondo rojo Antes dibujamos una l\u00ednea, \u00bfd\u00f3nde especifiacamos el color de su trazo? Hay dos funciones que debemos llamar antes para indicar los colores tanto el trazo como del relleno de las figuras. stroke(color) . Define el color del trazo. noStroke() . Dibuja la figura sin trazos. fill(color) . Relleno de la figura. Se aplica en cuadrados, rect\u00e1ngulos o elipses. noFill() . Dibuja la figura sin color de relleno. Por ejemplo, para dibujar un rect\u00e1ngulo con trazo blanco y relleno verde: 1 2 3 stroke ( 255 ) # Trazo blanco fill ( 0 , 255 , 0 ) # Relleno verde rect ( 25 , 25 , 75 , 75 ) # Dibujar rect\u00e1ngulo Estas funciones se pueden encadenar para dibujar varias figuras con diferentes colores. 1 2 3 stroke ( 127 , 5 , 38 ) # Trazo de color noFill () # Sin relleno rect ( 10 , 10 , 90 , 90 ) # Dibujar rect\u00e1ngulo Figuras b\u00e1sicas Bueno, aunque ya hemos visto c\u00f3mo usar dos figuras en Plus5, vamos a poner aqu\u00ed otras m\u00e1s: point(x,y) . Dibuja un punto con el trazo especificado por stroke() . line(x_inicial, y_inicial, x_final, y_final) . Dibuja una l\u00ednea desde las coordenadas iniciales a las coordenadas finales. Usa el color de trazo especificado por stroke() . triangle(x_1, y_1, x_2, y_2, x_3, y_3) . Dibuja un tri\u00e1ngulo definido por tres coordenadas. Color de trazo especificado por stroke() y relleno por fill() . square(x, y, lado) . Dibuja un cuadrado de tama\u00f1o lado en las coordenadas indicadas. Color de trazo especificado por stroke() y relleno por fill() . rect(x, y, largo, ancho) . Dibuja un rect\u00e1ngulo desde las coordenadas iniciales a las coordenadas. Color de trazo especificado por stroke() y relleno por fill() . circle(x, y, radio) . Dibuja un c\u00edrculo con centro en las coordenadas x,y y con el radio especificado. Color de trazo especificado por stroke() y relleno por fill() . ellipse(x, y, largo, ancho) . Dibuja una elipse con centro en las coordenadas x,y y con el ancho y largo especificados. Color de trazo especificado por stroke() y relleno por fill() . Todos los par\u00e1metros indicados (coordenadas, radios, tama\u00f1os) son num\u00e9ricos, generalmente n\u00fameros naturales. Textos Processing, y Plus5, tambi\u00e9n permiten escribir textos. Para ello se usa la funci\u00f3n text() . text(texto, x, y) . Escribe el texto en las coordenadas x,y con el color de trazo especificado por stroke() . Para establecer la fuente y cambiar el tama\u00f1o. textSize(tama\u00f1o) . Cambiar el tama\u00f1o del texto, medido en p\u00edxeles. textFont(fuente) . Establece la fuente por defecto. El par\u00e1metro fuente es el nombre de una tipograf\u00eda disponible en el sistema. Ahora veamos un ejemplo de uso de textos: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from plus5 import * # Usar funciones de Plus5 def setup (): # Inicializaci\u00f3n size ( 300 , 300 ) # Establecer tama\u00f1o de la ventana fuente = createFont ( 'droidsans' , 40 ) # Usar fuente textFont ( fuente ) # Esteblecer fuente predefinida def draw (): background ( 0 ) # Fondo negro stroke ( 255 ) # Trazo blanco textSize ( 60 ) # Tama\u00f1o de texto text ( \"Hola mundo\" , 0 , 0 ) # Escribe texto run () # Ejecutar programa Interacci\u00f3n Para reaccionar a acciones realizadas por los usuarios, los programas con interfaz gr\u00e1fico deben leer los estados y eventos del teclado y rat\u00f3n. Plus5 no es menos, y lo hace bastante sencillo. Rat\u00f3n Como hemos visto, podemos conocer las coordenadas del rat\u00f3n, pero no son las \u00fanicas variables disponibles. Tambi\u00e9n es posible detectar si se han pulsado los botones: mouse_x . Coordenada x del rat\u00f3n. mouse_y . Coordenada y del rat\u00f3n. mouse_is_pressed . Verdadero si se ha pulsado un bot\u00f3n del rat\u00f3n. mouse_button . Si mouse_is_pressed es verdadero, mouse_button tendr\u00e1 el valor LEFT o RIGHT seg\u00fan el bot\u00f3n del rat\u00f3n que se ha presionado (izquierdo, derecho). Vamos a ver c\u00f3mo cambiar el fondo de la pantalla seg\u00fan est\u00e9 pulsado o no el bot\u00f3n del rat\u00f3n. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from plus5 import * # Usar funciones de Plus5 def setup (): size ( 300 , 300 ) # Tama\u00f1o de la ventana def draw (): if mouseIsPressed == True : # Si se ha presionado el bot\u00f3n del rat\u00f3n if mouseButton == 'LEFT' : # y el bot\u00f3n es el izquierdo background ( 255 ) # mostrar el fondo en blanco else : # pero si es el bot\u00f3n derech background ( 127 ) # mostrar el fondo en gris. else : # Si no se ha presionado el rat\u00f3n background ( 0 ) # mostrar el fondo de color negro. run () # Ejecutar programa Teclado La l\u00f3gica del teclado es similar a la del rat\u00f3n. Hay funciones para saber si se ha pulsado alguna tecla y otra para saber qu\u00e9 tecla ha sido. keyIsPressed . Es verdadero si hay una tecla pulsada. key . Da el valor de la tecla. Si son caracteres normales, nos da su valor (por ejemplo a , '\u00d1' o \u20ac ). Pero tambi\u00e9n nos indica si se ha pulsado alguna tecla especial. Los valores de algunas de las teclas especiales son: UP (flecha arriba), DOWN (flecha abajo), LEFT (flecha izquierda), RIGHT (flecha derecha), PAGE UP (p\u00e1gina arriba), PAGE DOWN (p\u00e1gina abajo), RETURN (retorno), ESCAPE , DELETE (suprimir), TAB (tabulador), BACKSPACE (borrar), SHIFT (may\u00fascula), ALT , CONTROL , F1 ... F12 (teclas de funci\u00f3n), HOME (inicio), END (fin). Vamos a dibujar por la pantalla usando las flechas del teclado: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 from plus5 import * # Usar funciones de Plus5 cursor_x = 0 # Variables globales para almacenar cursor_y = 0 # la posici\u00f3n actual del cursor camino = [] # Lista para camino recorrido def setup (): # Inicializaci\u00f3n global cursor_x , cursor_y # Usar las variables globales size ( 300 , 300 ) # Tama\u00f1o de la ventana cursor_x = height / 2 # Posici\u00f3n inicial para comenzar cursor_y = width / 2 # a pintar: centro de ventana stroke ( 0 ) # Trazo negro def draw (): # Dibujar global cursor_x , cursor_y # Usar las variables globales global camino # Usar las variables globales background ( 255 ) # Aqu\u00ed para no borrar la ventana if keyIsPressed == True : # \u00bfSe ha presionado una tecla? pos = ( cursor_x , cursor_y ) # Almacenar posici\u00f3n actual en tupla camino . append ( pos ) # Guardar tupla en lista if keyCode == 'LEFT' : # Flecha izquierda cursor_x = cursor_x - 1 # ir a la izquierda elif keyCode == 'RIGHT' : # Flecha derecha cursor_x = cursor_x + 1 # ir a la derecha elif keyCode == 'UP' : # Flecha arriba cursor_y = cursor_y - 1 # ir arriba elif keyCode == 'DOWN' : # Flecha abajo cursor_y = cursor_y + 1 # ir abajo for punto in camino : # Dibujar camino ya realizado x = punto [ 0 ] # Obtener coordenada x del punto y = punto [ 1 ] # Obtener coordenada y del punto point ( x , y ) # Dibujar punto point ( cursor_x , cursor_y ) # Dibujar punto en posici\u00f3n actual run () C\u00f3mo instalar Plus5 De momento, plus5 no est\u00e1 empaquetado en ninguna distribuci\u00f3n, lo que significa que tampoco est\u00e1 disponible en las distribuciones derivadas como Ubuntu y Raspberry Pi OS. 1 $ pip3 install plus5 pygame Adem\u00e1s, hay que instalar la librer\u00eda de tipograf\u00edas de SDL2. En Debian (Ubuntu, Raspbian OS): 1 $ sudo apt install libsdl2-ttf En Fedora, RHEL 1 $ sudo dnf install SDL2_ttf Enlaces P\u00e1gina de desarrollo de plus5 . Processing . Tutorial de Python .","title":"Home"},{"location":"#introduccion-a-plus5-programacion-grafica-facil-con-python","text":"","title":"Introducci\u00f3n a Plus5: Programaci\u00f3n gr\u00e1fica f\u00e1cil con Python"},{"location":"#que-es-plus5","text":"Processing es un entorno de programaci\u00f3n gr\u00e1fico, ideado por Casey Reas y Ben Fry. Es, principalmente, una herramienta educativa. El objetivo es que personas sin conocimientos avanzados de inform\u00e1tica, especialmente artistas gr\u00e1ficos, se introdujeran en el mundo de la programaci\u00f3n, de una forma sencilla. En su encarnaci\u00f3n tradicional, Processing es un entorno integrado de desarrollo basado en Java, con librer\u00edas de f\u00e1cil uso. Processing ofrece funciones para dibujar y animar figuras geom\u00e9tricas, mostrar textos, im\u00e1genes, reproducir sonidos y v\u00eddeos e interactuar con algunos perif\u00e9ricos como teclado, rat\u00f3n y c\u00e1maras de v\u00eddeo. Estas librer\u00edas han sido adaptadas a otros lenguajes de programaci\u00f3n, como JavaScript y Python. Precisamente, Plus5 es una implementaci\u00f3n de Processing en Python nativo. Usa PyGame que a su vez usa las librer\u00edas SDL2, disponibles es m\u00faltiples sistemas operativos. \u00bfCu\u00e1les son las ventajas de Plus5? La primera es Python, que es un lenguaje de f\u00e1cil aprendizaje. La segunda ventaja, es que Plus5 es una librer\u00eda nativa de Python , y por tanto, puede usarse con el resto de librer\u00edas de Python, como NumPy, Pandas, TensorFlow y mil m\u00e1s. Esto abre infinitas posibilidades creativas.","title":"Qu\u00e9 es Plus5"},{"location":"#entorno-de-programacion","text":"Al ser Python est\u00e1ndar, Plus5 se puede programar usando cualquier entorno de programaci\u00f3n que tenga soporte de Python, como IDLE, Visual Studio Code, PyCharm, etc. Actualmente, en Raspberry Pi OS viene el entorno Thonny Python IDE, que es el que usaremos en este tutorial. Al final del art\u00edculo indicamos los pasos a seguir para instalar Plus5. Vamos a ver ahora c\u00f3mo se programa.","title":"Entorno de programaci\u00f3n"},{"location":"#hola-mundo-vesion-plus5","text":"Este es el programa m\u00e1s b\u00e1sico que podemos hacer usando Plus5. Tan b\u00e1sico que lo \u00fanico que hace es abrir una ventana. Los comentarios se indican con una almohadilla. 1 2 3 4 5 6 7 8 9 from plus5 import * # Usar las funciones de Plus5 def setup (): # Inicializaci\u00f3n size ( 300 , 300 ) # Ventana de 300x300 p\u00edxeles def draw (): # Dibujar pass # No hacer nada run () # Ejecutar Plus5 Lo que hace run() es llamar una sola vez a la funci\u00f3n setup() . Luego, entra en un bucle infinito en el que se llamada a la funci\u00f3n draw() 60 veces cada segundo. Generalmente, querremos hacer m\u00e1s cosas. Vamos a hacer un ejemplo m\u00e1s interesante. El siguiente programa crea una ventana de 500 p\u00edxeles de largo 500 p\u00edxeles de ancho y selecciona el color blanco para los trazos. Luego entra en un bucle infinito que pinta el fondo de la ventana de gris y dibuja una l\u00ednea desde el centro de la ventana hasta la posici\u00f3n actual del cursor del rat\u00f3n. 1 2 3 4 5 6 7 8 9 10 11 from plus5 import * # Usar las funciones de Plus5 def setup (): # Inicializaci\u00f3n size ( 300 , 300 ) # Establecer tama\u00f1o de la ventana stroke ( 255 , 255 , 255 ) # Trazos de color blanco def draw (): # Dibujar background ( 127 , 127 , 127 ) # Fondo gris line ( 150 , 150 , mouseX , mouseY ) # L\u00ednea desde centro al rat\u00f3n run () # Ejecutar programa Ahora usamos varias funciones de dibujo: stroke(color) . Establecer el color de los trazos. background(color) . Rellenar el fondo de la ventana. line(x_inicial, y_inicial, x_final, y_final) . Dibujamos una l\u00ednea. Tambi\u00e9n usamos un par de variables globales: mouse_x , mouse_y . Son variables proporcionadas por Plus5 que nos devuelven la posici\u00f3n actual del puntero del rat\u00f3n sobre la ventana. Por supuesto, Plus5 ofrece muchas m\u00e1s funciones y variables para dibujar otras figuras, trabajar con colores o leer otros perif\u00e9ricos. Pero por muy complicados que los hagamos, todos los programas de Plus5 tienen exactamente la misma estructura: import , setup() , draw() y run() . \u00a1Es muy f\u00e1cil!","title":"Hola mundo, vesi\u00f3n Plus5"},{"location":"#coordenadas","text":"Para dibujar en Processing se har\u00e1 un uso frecuente de las coordenadas de la ventana. Su tama\u00f1o se define en la funci\u00f3n setup() mediante size(ancho,largo) . Para dibujar, debemos tener en cuenta que el punto x = 0, y = 0 est\u00e1 situado en la esquina superior derecha. x,y x,y x,y (0,0) (1,0) (2,0) (0,1) (1,1) (2,1) (0,2) (1,2) (2,2) En Plus5, podemos conocer el ancho y largo de la ventana actual, definidos en size() , mediante dos variables globales. height . Ancho de la ventana. width . Largo de la ventana. As\u00ed, para dibujar una l\u00ednea desde el centro de la ventana a all\u00e1 donde est\u00e9 el cursor del rat\u00f3n har\u00edamos: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from plus5 import * # Usar funciones de Plus5 def setup (): # Inicializaci\u00f3n size ( 300 , 300 ) # Define tama\u00f1o de la ventana stroke ( 0 , 0 , 0 ) # Trazo negro def draw (): # Dibujar background ( 255 , 255 , 255 ) # Fondo blanco centro_x = height / 2 # Calcula mitad de la ventana centro_y = width / 2 # Calcula mitad de la ventana line ( centro_x , # Dibujar l\u00ednea desde el centro centro_y , # de la ventana hasta cursor rat\u00f3n. mouseX , # Coordenada x del rat\u00f3n mouseY ) # Coordenada y del rat\u00f3n run () # Ejecutar programa El programa es bastante similar al anterior, pero en este caso, las coordenadas del centro de la ventana se calculan autom\u00e1ticamente.","title":"Coordenadas"},{"location":"#colores","text":"A la hora de dibujar, muchas veces deberemos especificar un color. Aunque no sea expl\u00edcito, las figuras necesitan al menos el color del trazo, pero muchas veces tambi\u00e9n el relleno. Y hay varias formas de especificar los colores. Escala de gris, de 0 a 255 . Representa un color en la escala de grises, desde el negro (0) al blanco (255). Rojo, verde, azul . En este caso, indicamos tres valores, tambi\u00e9n desde el 0 al 255, pero indicando el tono de rojo, verde y azul. Rojo, verde, azul, transparencia . Opcionalmente, podemos indicar un cuarto valor, el de la transparencia, tambi\u00e9n desde 0 (completamente transparente) a 255 (opaco). Esto nos permite combinar figuras y mezclar colores. Veamos algunos ejemplos de uso: 1 2 background ( 255 ) # Fondo blanco background ( 255 , 0 , 0 ) # Fondo rojo Antes dibujamos una l\u00ednea, \u00bfd\u00f3nde especifiacamos el color de su trazo? Hay dos funciones que debemos llamar antes para indicar los colores tanto el trazo como del relleno de las figuras. stroke(color) . Define el color del trazo. noStroke() . Dibuja la figura sin trazos. fill(color) . Relleno de la figura. Se aplica en cuadrados, rect\u00e1ngulos o elipses. noFill() . Dibuja la figura sin color de relleno. Por ejemplo, para dibujar un rect\u00e1ngulo con trazo blanco y relleno verde: 1 2 3 stroke ( 255 ) # Trazo blanco fill ( 0 , 255 , 0 ) # Relleno verde rect ( 25 , 25 , 75 , 75 ) # Dibujar rect\u00e1ngulo Estas funciones se pueden encadenar para dibujar varias figuras con diferentes colores. 1 2 3 stroke ( 127 , 5 , 38 ) # Trazo de color noFill () # Sin relleno rect ( 10 , 10 , 90 , 90 ) # Dibujar rect\u00e1ngulo","title":"Colores"},{"location":"#figuras-basicas","text":"Bueno, aunque ya hemos visto c\u00f3mo usar dos figuras en Plus5, vamos a poner aqu\u00ed otras m\u00e1s: point(x,y) . Dibuja un punto con el trazo especificado por stroke() . line(x_inicial, y_inicial, x_final, y_final) . Dibuja una l\u00ednea desde las coordenadas iniciales a las coordenadas finales. Usa el color de trazo especificado por stroke() . triangle(x_1, y_1, x_2, y_2, x_3, y_3) . Dibuja un tri\u00e1ngulo definido por tres coordenadas. Color de trazo especificado por stroke() y relleno por fill() . square(x, y, lado) . Dibuja un cuadrado de tama\u00f1o lado en las coordenadas indicadas. Color de trazo especificado por stroke() y relleno por fill() . rect(x, y, largo, ancho) . Dibuja un rect\u00e1ngulo desde las coordenadas iniciales a las coordenadas. Color de trazo especificado por stroke() y relleno por fill() . circle(x, y, radio) . Dibuja un c\u00edrculo con centro en las coordenadas x,y y con el radio especificado. Color de trazo especificado por stroke() y relleno por fill() . ellipse(x, y, largo, ancho) . Dibuja una elipse con centro en las coordenadas x,y y con el ancho y largo especificados. Color de trazo especificado por stroke() y relleno por fill() . Todos los par\u00e1metros indicados (coordenadas, radios, tama\u00f1os) son num\u00e9ricos, generalmente n\u00fameros naturales.","title":"Figuras b\u00e1sicas"},{"location":"#textos","text":"Processing, y Plus5, tambi\u00e9n permiten escribir textos. Para ello se usa la funci\u00f3n text() . text(texto, x, y) . Escribe el texto en las coordenadas x,y con el color de trazo especificado por stroke() . Para establecer la fuente y cambiar el tama\u00f1o. textSize(tama\u00f1o) . Cambiar el tama\u00f1o del texto, medido en p\u00edxeles. textFont(fuente) . Establece la fuente por defecto. El par\u00e1metro fuente es el nombre de una tipograf\u00eda disponible en el sistema. Ahora veamos un ejemplo de uso de textos: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from plus5 import * # Usar funciones de Plus5 def setup (): # Inicializaci\u00f3n size ( 300 , 300 ) # Establecer tama\u00f1o de la ventana fuente = createFont ( 'droidsans' , 40 ) # Usar fuente textFont ( fuente ) # Esteblecer fuente predefinida def draw (): background ( 0 ) # Fondo negro stroke ( 255 ) # Trazo blanco textSize ( 60 ) # Tama\u00f1o de texto text ( \"Hola mundo\" , 0 , 0 ) # Escribe texto run () # Ejecutar programa","title":"Textos"},{"location":"#interaccion","text":"Para reaccionar a acciones realizadas por los usuarios, los programas con interfaz gr\u00e1fico deben leer los estados y eventos del teclado y rat\u00f3n. Plus5 no es menos, y lo hace bastante sencillo.","title":"Interacci\u00f3n"},{"location":"#raton","text":"Como hemos visto, podemos conocer las coordenadas del rat\u00f3n, pero no son las \u00fanicas variables disponibles. Tambi\u00e9n es posible detectar si se han pulsado los botones: mouse_x . Coordenada x del rat\u00f3n. mouse_y . Coordenada y del rat\u00f3n. mouse_is_pressed . Verdadero si se ha pulsado un bot\u00f3n del rat\u00f3n. mouse_button . Si mouse_is_pressed es verdadero, mouse_button tendr\u00e1 el valor LEFT o RIGHT seg\u00fan el bot\u00f3n del rat\u00f3n que se ha presionado (izquierdo, derecho). Vamos a ver c\u00f3mo cambiar el fondo de la pantalla seg\u00fan est\u00e9 pulsado o no el bot\u00f3n del rat\u00f3n. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from plus5 import * # Usar funciones de Plus5 def setup (): size ( 300 , 300 ) # Tama\u00f1o de la ventana def draw (): if mouseIsPressed == True : # Si se ha presionado el bot\u00f3n del rat\u00f3n if mouseButton == 'LEFT' : # y el bot\u00f3n es el izquierdo background ( 255 ) # mostrar el fondo en blanco else : # pero si es el bot\u00f3n derech background ( 127 ) # mostrar el fondo en gris. else : # Si no se ha presionado el rat\u00f3n background ( 0 ) # mostrar el fondo de color negro. run () # Ejecutar programa","title":"Rat\u00f3n"},{"location":"#teclado","text":"La l\u00f3gica del teclado es similar a la del rat\u00f3n. Hay funciones para saber si se ha pulsado alguna tecla y otra para saber qu\u00e9 tecla ha sido. keyIsPressed . Es verdadero si hay una tecla pulsada. key . Da el valor de la tecla. Si son caracteres normales, nos da su valor (por ejemplo a , '\u00d1' o \u20ac ). Pero tambi\u00e9n nos indica si se ha pulsado alguna tecla especial. Los valores de algunas de las teclas especiales son: UP (flecha arriba), DOWN (flecha abajo), LEFT (flecha izquierda), RIGHT (flecha derecha), PAGE UP (p\u00e1gina arriba), PAGE DOWN (p\u00e1gina abajo), RETURN (retorno), ESCAPE , DELETE (suprimir), TAB (tabulador), BACKSPACE (borrar), SHIFT (may\u00fascula), ALT , CONTROL , F1 ... F12 (teclas de funci\u00f3n), HOME (inicio), END (fin). Vamos a dibujar por la pantalla usando las flechas del teclado: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 from plus5 import * # Usar funciones de Plus5 cursor_x = 0 # Variables globales para almacenar cursor_y = 0 # la posici\u00f3n actual del cursor camino = [] # Lista para camino recorrido def setup (): # Inicializaci\u00f3n global cursor_x , cursor_y # Usar las variables globales size ( 300 , 300 ) # Tama\u00f1o de la ventana cursor_x = height / 2 # Posici\u00f3n inicial para comenzar cursor_y = width / 2 # a pintar: centro de ventana stroke ( 0 ) # Trazo negro def draw (): # Dibujar global cursor_x , cursor_y # Usar las variables globales global camino # Usar las variables globales background ( 255 ) # Aqu\u00ed para no borrar la ventana if keyIsPressed == True : # \u00bfSe ha presionado una tecla? pos = ( cursor_x , cursor_y ) # Almacenar posici\u00f3n actual en tupla camino . append ( pos ) # Guardar tupla en lista if keyCode == 'LEFT' : # Flecha izquierda cursor_x = cursor_x - 1 # ir a la izquierda elif keyCode == 'RIGHT' : # Flecha derecha cursor_x = cursor_x + 1 # ir a la derecha elif keyCode == 'UP' : # Flecha arriba cursor_y = cursor_y - 1 # ir arriba elif keyCode == 'DOWN' : # Flecha abajo cursor_y = cursor_y + 1 # ir abajo for punto in camino : # Dibujar camino ya realizado x = punto [ 0 ] # Obtener coordenada x del punto y = punto [ 1 ] # Obtener coordenada y del punto point ( x , y ) # Dibujar punto point ( cursor_x , cursor_y ) # Dibujar punto en posici\u00f3n actual run ()","title":"Teclado"},{"location":"#como-instalar-plus5","text":"De momento, plus5 no est\u00e1 empaquetado en ninguna distribuci\u00f3n, lo que significa que tampoco est\u00e1 disponible en las distribuciones derivadas como Ubuntu y Raspberry Pi OS. 1 $ pip3 install plus5 pygame Adem\u00e1s, hay que instalar la librer\u00eda de tipograf\u00edas de SDL2. En Debian (Ubuntu, Raspbian OS): 1 $ sudo apt install libsdl2-ttf En Fedora, RHEL 1 $ sudo dnf install SDL2_ttf","title":"C\u00f3mo instalar Plus5"},{"location":"#enlaces","text":"P\u00e1gina de desarrollo de plus5 . Processing . Tutorial de Python .","title":"Enlaces"}]}